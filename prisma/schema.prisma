generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// model TahunRecap {
//   id           String   @id @default(cuid())
//   tahun        String?
//   jurusan      String?
//   users   User[]
// }

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String?              @unique
  emailVerified DateTime?            @map("email_verified")
  image         String?
  password      String?
  role          String               @default("user")
  address       String?
  createdAt     DateTime             @default(now())
  major         String?
  gender        String?
  dateOfBirth   Int?
  placeOfBirth  String?
  noTelphone    String?
  tahunLulus    Int?
  // tahunId       String
  // tahunRecap    TahunRecap           @relation(fields: [tahunId], references: [id], onDelete: Cascade)
  updatedAt     DateTime             @updatedAt
  alumniBekerja       AlumniBekerja[]
  alumniWirausaha     AlumniBerwirausaha[]
  alumniKuliah        AlumniKuliah[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AlumniBekerja {
  id              String   @id @default(cuid())
  tempatKerja     String
  alamat          String
  jabatan         String
  statusPekerjaan Boolean
  penghasilan     Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AlumniBerwirausaha {
  id          String   @id @default(cuid())
  namaUsaha       String
  penghasilan Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AlumniKuliah {
  id        String   @id @default(cuid())
  namaKuliah    String
  alamat    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
